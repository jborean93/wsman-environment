{% set http_port = (certificate_base_port + ((certificate_info | length) * 4)) %}
[windows]
# Used for basic testing, the standard endpoints with no funny business
http_vanilla  ansible_port=5985
https_vanilla  ansible_port=5986

# JEA and gMSA testing
jea  ansible_psrp_configuration_name=JEA

# Various channel binding token tests
{% for n in range(1, certificate_info | length) %}
{% set cert = certificate_info[n] %}
{% if cert.self_signed | default(False) or cert.subject | default('') or cert.algorithms | default('') in ['sha1', 'sha512-pss'] %}
{% set cert_options = ' ansible_psrp_cert_validation=ignore' %}
{% elif not cert.system_ca|default(True) %}
{% set cert_options = ' ansible_psrp_ca_cert=ca_explicit.pem' %}
{% endif %}
https_cbt_{{ cert.test }}  ansible_port={{ certificate_base_port + (n * 4)}}{{ cert_options | default('') }}
{% endfor %}

# HTTP and Proxy tests
{% for scheme in ['http', 'https'] %}
{% for auth_protocol in ['basic', 'cert', 'ntlm', 'kerb', 'nego', 'credssp'] if not (scheme == 'http' and auth_protocol == 'cert') %}
{{ scheme }}_{{ auth_protocol }}_none_none

{% for proxy in proxy_info %}
{% for proxy_scheme in ['http', 'https', 'socks'] if not (proxy_scheme == 'socks' and proxy.auth in ['basic', 'ldap', 'kerb']) %}
{% set proxy_protocol = {'socks': 'socks'}.get(proxy_scheme, proxy_scheme) %}
{% set proxy_url_cred = {'basic': proxy_username ~ ':' ~ proxy_password ~ '@', 'ldap': domain_username ~ ':' ~ domain_password ~ '@'}.get(proxy.auth, '') %}
{% set proxy_port = {'http': ':' ~ proxy.port, 'https': ':' ~ ((proxy.port | int) + 1)}.get(proxy_scheme, '') %}
{{ scheme }}_{{ auth_protocol }}_{{ proxy_scheme }}_{{ proxy.auth }} ansible_psrp_proxy={{ proxy_protocol }}://{{ proxy_url_cred }}squid.{{ domain_realm }}{{ proxy_port }}/
{% endfor %}

{% endfor %}
{% endfor %}
{% endfor %}
[windows:vars]
ansible_host=test.{{ domain_realm }}
ansible_connection=psrp
{% for scheme in ['http', 'https'] %}

[{{ scheme }}]
{{ scheme }}_vanilla
{% if scheme == 'http' %}
jea
{% else %}
{% for n in range(1, certificate_info|length) %}
https_cbt_{{ certificate_info[n].test }}
{% endfor %}
{% endif %}
{% for auth_protocol in ['basic', 'cert', 'ntlm', 'kerb', 'nego', 'credssp'] if not (scheme == 'http' and auth_protocol == 'cert') %}
{{ scheme }}_{{ auth_protocol }}_none_none
{% for proxy in proxy_info %}
{% for proxy_scheme in ['http', 'https', 'socks'] if not (proxy_scheme == 'socks' and proxy.auth in ['basic', 'ldap', 'kerb']) %}
{{ scheme }}_{{ auth_protocol }}_{{ proxy_scheme }}_{{ proxy.auth }}
{% endfor %}
{% endfor %}
{% endfor %}

[{{ scheme }}:vars]
ansible_psrp_port={{ (scheme == 'http') | ternary(http_port, certificate_base_port) }}
ansible_psrp_protocol={{ scheme }}
{% if scheme == 'https' %}
ansible_psrp_ca_cert=ca.pem
{% endif %}
{% endfor %}
{% for auth_protocol in ['basic', 'cert', 'ntlm', 'kerb', 'nego', 'credssp'] %}

[{{ auth_protocol }}]
{% for scheme in ['http', 'https'] if not (scheme == 'http' and auth_protocol == 'cert') %}
{{ scheme }}_{{ auth_protocol }}_none_none
{% for proxy in proxy_info %}
{% for proxy_scheme in ['http', 'https', 'socks'] if not (proxy_scheme == 'socks' and proxy.auth in ['basic', 'ldap', 'kerb']) %}
{{ scheme }}_{{ auth_protocol }}_{{ proxy_scheme }}_{{ proxy.auth }}
{% endfor %}
{% endfor %}
{% endfor %}

[{{ auth_protocol }}:vars]
ansible_psrp_auth={{ {'basic': 'basic', 'cert': 'certificate', 'ntlm': 'ntlm', 'kerb': 'kerberos', 'nego': 'negotiate', 'credssp': 'credssp' }[auth_protocol] }}
{% if auth_protocol == 'basic' %}
ansible_user={{ local_username }}
ansible_password={{ local_password }}
ansible_psrp_message_encryption=never
{% elif auth_protocol == 'cert' %}
ansible_psrp_certificate_pem=client_auth.pem
ansible_psrp_certificate_key_pem=client_auth.key
{% else %}
ansible_user={{ domain_username }}@{{ domain_realm | upper }}
ansible_password={{ domain_password }}
ansible_psrp_negotiate_service=http
{% endif %}
{% endfor %}

